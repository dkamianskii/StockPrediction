# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from grpc_pbs import technical_indicators_pb2 as technical__indicators__pb2


class TechnicalIndicatorsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSMA = channel.unary_unary(
                '/TechnicalIndicators/GetSMA',
                request_serializer=technical__indicators__pb2.SMARequest.SerializeToString,
                response_deserializer=technical__indicators__pb2.OneChannelIndicatorResponse.FromString,
                )
        self.GetEMA = channel.unary_unary(
                '/TechnicalIndicators/GetEMA',
                request_serializer=technical__indicators__pb2.EMARequest.SerializeToString,
                response_deserializer=technical__indicators__pb2.OneChannelIndicatorResponse.FromString,
                )
        self.GetWMA = channel.unary_unary(
                '/TechnicalIndicators/GetWMA',
                request_serializer=technical__indicators__pb2.WMARequest.SerializeToString,
                response_deserializer=technical__indicators__pb2.OneChannelIndicatorResponse.FromString,
                )
        self.GetRoC = channel.unary_unary(
                '/TechnicalIndicators/GetRoC',
                request_serializer=technical__indicators__pb2.RoCRequest.SerializeToString,
                response_deserializer=technical__indicators__pb2.OneChannelIndicatorResponse.FromString,
                )
        self.GetMACD = channel.unary_unary(
                '/TechnicalIndicators/GetMACD',
                request_serializer=technical__indicators__pb2.MACDRequest.SerializeToString,
                response_deserializer=technical__indicators__pb2.MACDResponse.FromString,
                )
        self.GetRSI = channel.unary_unary(
                '/TechnicalIndicators/GetRSI',
                request_serializer=technical__indicators__pb2.RSIRequest.SerializeToString,
                response_deserializer=technical__indicators__pb2.OneChannelIndicatorResponse.FromString,
                )
        self.GetAlligator = channel.unary_unary(
                '/TechnicalIndicators/GetAlligator',
                request_serializer=technical__indicators__pb2.AlligatorRequest.SerializeToString,
                response_deserializer=technical__indicators__pb2.AlligatorResponse.FromString,
                )
        self.GetBollingerBands = channel.unary_unary(
                '/TechnicalIndicators/GetBollingerBands',
                request_serializer=technical__indicators__pb2.BollingerBandsRequest.SerializeToString,
                response_deserializer=technical__indicators__pb2.BollingerBandsResponse.FromString,
                )
        self.GetRVI = channel.unary_unary(
                '/TechnicalIndicators/GetRVI',
                request_serializer=technical__indicators__pb2.RVIRequest.SerializeToString,
                response_deserializer=technical__indicators__pb2.RVIResponse.FromString,
                )


class TechnicalIndicatorsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetSMA(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEMA(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWMA(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRoC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMACD(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRSI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAlligator(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBollingerBands(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRVI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TechnicalIndicatorsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSMA': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSMA,
                    request_deserializer=technical__indicators__pb2.SMARequest.FromString,
                    response_serializer=technical__indicators__pb2.OneChannelIndicatorResponse.SerializeToString,
            ),
            'GetEMA': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEMA,
                    request_deserializer=technical__indicators__pb2.EMARequest.FromString,
                    response_serializer=technical__indicators__pb2.OneChannelIndicatorResponse.SerializeToString,
            ),
            'GetWMA': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWMA,
                    request_deserializer=technical__indicators__pb2.WMARequest.FromString,
                    response_serializer=technical__indicators__pb2.OneChannelIndicatorResponse.SerializeToString,
            ),
            'GetRoC': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRoC,
                    request_deserializer=technical__indicators__pb2.RoCRequest.FromString,
                    response_serializer=technical__indicators__pb2.OneChannelIndicatorResponse.SerializeToString,
            ),
            'GetMACD': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMACD,
                    request_deserializer=technical__indicators__pb2.MACDRequest.FromString,
                    response_serializer=technical__indicators__pb2.MACDResponse.SerializeToString,
            ),
            'GetRSI': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRSI,
                    request_deserializer=technical__indicators__pb2.RSIRequest.FromString,
                    response_serializer=technical__indicators__pb2.OneChannelIndicatorResponse.SerializeToString,
            ),
            'GetAlligator': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAlligator,
                    request_deserializer=technical__indicators__pb2.AlligatorRequest.FromString,
                    response_serializer=technical__indicators__pb2.AlligatorResponse.SerializeToString,
            ),
            'GetBollingerBands': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBollingerBands,
                    request_deserializer=technical__indicators__pb2.BollingerBandsRequest.FromString,
                    response_serializer=technical__indicators__pb2.BollingerBandsResponse.SerializeToString,
            ),
            'GetRVI': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRVI,
                    request_deserializer=technical__indicators__pb2.RVIRequest.FromString,
                    response_serializer=technical__indicators__pb2.RVIResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TechnicalIndicators', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TechnicalIndicators(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetSMA(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TechnicalIndicators/GetSMA',
            technical__indicators__pb2.SMARequest.SerializeToString,
            technical__indicators__pb2.OneChannelIndicatorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEMA(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TechnicalIndicators/GetEMA',
            technical__indicators__pb2.EMARequest.SerializeToString,
            technical__indicators__pb2.OneChannelIndicatorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWMA(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TechnicalIndicators/GetWMA',
            technical__indicators__pb2.WMARequest.SerializeToString,
            technical__indicators__pb2.OneChannelIndicatorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRoC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TechnicalIndicators/GetRoC',
            technical__indicators__pb2.RoCRequest.SerializeToString,
            technical__indicators__pb2.OneChannelIndicatorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMACD(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TechnicalIndicators/GetMACD',
            technical__indicators__pb2.MACDRequest.SerializeToString,
            technical__indicators__pb2.MACDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRSI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TechnicalIndicators/GetRSI',
            technical__indicators__pb2.RSIRequest.SerializeToString,
            technical__indicators__pb2.OneChannelIndicatorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAlligator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TechnicalIndicators/GetAlligator',
            technical__indicators__pb2.AlligatorRequest.SerializeToString,
            technical__indicators__pb2.AlligatorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBollingerBands(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TechnicalIndicators/GetBollingerBands',
            technical__indicators__pb2.BollingerBandsRequest.SerializeToString,
            technical__indicators__pb2.BollingerBandsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRVI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TechnicalIndicators/GetRVI',
            technical__indicators__pb2.RVIRequest.SerializeToString,
            technical__indicators__pb2.RVIResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
